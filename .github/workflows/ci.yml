name: HRB Jackpot Coin â€” Build & Artifacts (Linux + Windows-native)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  # =========================
  # Linux native (Qt optional)
  # =========================
  build-linux:
    name: Build (Linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full repo with submodules & tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: recursive
          lfs: false

      - name: Ensure git metadata visible
        run: |
          git config --global --add safe.directory "$(pwd)"
          git fetch --tags --force || true

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential libtool autotools-dev automake pkg-config bsdmainutils python3 \
            libssl-dev libevent-dev libboost-system-dev libboost-filesystem-dev libboost-chrono-dev \
            libboost-test-dev libboost-thread-dev libminiupnpc-dev \
            qtbase5-dev qttools5-dev qttools5-dev-tools \
            zip

      - name: Autotools bootstrap
        run: |
          chmod +x autogen.sh || true
          ./autogen.sh || true

      - name: Configure (try GUI, fallback headless)
        run: |
          ./configure --with-gui=qt || ./configure --without-gui || (test -f config.log && tail -n +1 config.log; false)

      - name: Build (verbose)
        run: make -j"$(nproc)" V=1

      - name: Package Linux
        run: |
          mkdir -p dist/linux
          [ -f src/hrbjackpotcoind ] && cp src/hrbjackpotcoind dist/linux/ || true
          [ -f src/hrb-cli ] && cp src/hrb-cli dist/linux/ || true
          [ -f src/hrb-tx ] && cp src/hrb-tx dist/linux/ || true
          [ -f src/qt/hrbjackpotcoin-qt ] && cp src/qt/hrbjackpotcoin-qt dist/linux/ || true
          tar -C dist -czf hrbjackpotcoin-linux.tar.gz linux

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: hrbjackpotcoin-linux
          path: hrbjackpotcoin-linux.tar.gz
          if-no-files-found: error

  # =========================
  # Windows native (VS 2022)
  # =========================
  build-windows-msvc:
    name: Build (Windows native, VS 2022)
    runs-on: windows-2022
    steps:
      - name: Checkout (full repo with submodules & tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: recursive
          lfs: false

      - name: Ensure git metadata visible
        shell: bash
        run: |
          git config --global --add safe.directory "$(pwd)"
          git fetch --tags --force || true
          git submodule sync --recursive
          git submodule update --init --recursive

      # MSBuild is on the windows-2022 image, but ensure PATH
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # Use vcpkg in manifest mode (expects a vcpkg.json in your MSVC/solution dir)
      # Bitcoin Core uses build_msvc with vcpkg manifest. Adjust the directory if yours differs.
      - name: Setup vcpkg (manifest)
        uses: microsoft/setup-vcpkg@v1
        with:
          vcpkgJsonDir: build_msvc   # <-- change if your vcpkg.json lives elsewhere
          # triplet can be overridden inside the manifest; otherwise:
          triplet: x64-windows-static-md
          cleanAfterBuild: true

      # Build your MSVC solution
      # If your solution/target names differ from upstream, change them here.
      - name: Build Solution (Release x64)
        run: |
          msbuild build_msvc\\hrbjackpotcoin.sln /m /p:Configuration=Release /p:Platform=x64 /p:UseMultiToolTask=true /verbosity:minimal

      # Package whatever exes were produced (adjust globs to your actual output paths)
      - name: Collect & Package Windows binaries
        shell: bash
        run: |
          mkdir -p dist/windows
          # Common MSVC output locations; adjust if your solution outputs elsewhere:
          shopt -s nullglob
          for d in "build_msvc/x64/Release" "build_msvc/Release" "build_msvc/bin/Release"; do
            [ -d "$d" ] && cp -n "$d"/*.exe dist/windows/ || true
          done
          # Fallback: search entire tree for our exes (adjust names as needed)
          if [ -z "$(ls -A dist/windows 2>/dev/null)" ]; then
            find . -iname "hrbjackpotcoind*.exe" -o -iname "hrb-cli*.exe" -o -iname "hrb-tx*.exe" -o -iname "hrbjackpotcoin-qt*.exe" -exec cp -n {} dist/windows/ \; || true
          fi
          7z a hrbjackpotcoin-windows-msvc.zip ./dist/windows/*

      - name: Upload Windows (MSVC) artifact
        uses: actions/upload-artifact@v4
        with:
          name: hrbjackpotcoin-windows-msvc
          path: hrbjackpotcoin-windows-msvc.zip
          if-no-files-found: error
